rm(list=ls())

#https://andrewslabucsf.github.io/MR-tutorial/scripts/mr_harmonization.html

#####################################################################
####CHUNK 1: LOAD R PACKAGES
library(tidyverse)    # Data wrangling 
library(dplyr)
library(tibble)
library(readr)
library(tidyr)

#if (!require("BiocManager")) install.packages("BiocManager")
#BiocManager::install("TwoSampleMR")

#install.packages("LDlinkR")
library(LDlinkR)      # LD and proxy snps
#install.packages("calibrate")
library(calibrate)

#BiocManager::install("MendelianRandomization", dependencies = TRUE, update = TRUE, force = TRUE)

#install.packages("MendelianRandomization")
library(MendelianRandomization)
#install.packages("TwoSampleMR")
library(TwoSampleMR)
library(ieugwasr)
remotes::install_github("mrcieu/ieugwasr")
remotes::install_github("MRCIEU/ieugwasr@v0.2.1")
remotes::install_github("MRCIEU/TwoSampleMR@0.4.26")

#####################################################################
###CHUCK 2: LOAD FUNCTIONS
# Define column types for summary statistics
coltypes = cols(
  ID = col_character(),
  CHROM = col_double(),
  POS = col_double(),
  REF = col_character(),
  ALT = col_character(),
  AF = col_double(),
  TRAIT = col_character(),
  BETA = col_double(),
  SE = col_double(),
  Z = col_double(),
  P = col_double(),
  N = col_double(),
  OR = col_double(),
  OR_L95 = col_double(),
  OR_U95 = col_double(),
  DIR = col_character(),
  G1000_ID = col_character(),
  G1000_VARIANT = col_character(),
  DBSNP_ID = col_character(),
  DBSNP_VARIANT = col_character(),
  OLD_ID = col_character(),
  OLD_VARIANT = col_character()
)

#FUNCTION FOR MUNGING LDlink OUTPUT
munge_proxies <- function(LDLink_file, outcome, outcome_clump){
  LDLink_file_path <- LDLink_file
  proxy_snps <- read_tsv(LDLink_file_path, skip = 1, col_names = F) %>%
    rename(id = X1, func = X2, proxy_snp = X3, coord = X4, alleles = X5, maf = X6, 
           distance = X7, dprime = X8, rsq = X9, correlated_alleles = X10, FORGEdb = X11, RegulomeDB = X12) %>%
    separate(coord, c('chr', 'pos'), sep = ":") %>%
    mutate(snp = ifelse(id == 1, proxy_snp, NA), 
           chr = str_replace(chr, 'chr', ""), 
           chr = as.numeric(chr), 
           pos = as.numeric(pos)) %>%
    fill(snp, .direction = 'down') %>%
    relocate(snp, .before = proxy_snp) %>%
    dplyr::select(-id, -func, -FORGEdb, -RegulomeDB) %>%
    filter(rsq >= 0.8)
  
  # Munge proxy snp and outcome data
  proxy_outcome <- left_join(
    proxy_snps, outcome, by = c("proxy_snp" = "SNP")
  ) %>%
    separate(correlated_alleles, c("target_a1.outcome", "proxy_a1.outcome", 
                                   "target_a2.outcome", "proxy_a2.outcome"), sep = ",|=") %>%
    filter(!is.na(chr.outcome)) %>%
    arrange(snp, -rsq, abs(distance)) %>%
    group_by(snp) %>%
    slice(1) %>%
    ungroup() %>%
    mutate(
      proxy.outcome = TRUE,
      target_snp.outcome = snp,
      proxy_snp.outcome = proxy_snp, 
    ) %>% 
    mutate(
      new_effect_allele.outcome = case_when(
        proxy_a1.outcome == effect_allele.outcome & proxy_a2.outcome == other_allele.outcome ~ target_a1.outcome,
        proxy_a2.outcome == effect_allele.outcome & proxy_a1.outcome == other_allele.outcome ~ target_a2.outcome,
        TRUE ~ NA_character_
      ), 
      new_other_allele.outcome = case_when(
        proxy_a1.outcome == effect_allele.outcome & proxy_a2.outcome == other_allele.outcome ~ target_a2.outcome,
        proxy_a2.outcome == effect_allele.outcome & proxy_a1.outcome == other_allele.outcome ~ target_a1.outcome,
        TRUE ~ NA_character_
      ), 
      effect_allele.outcome = new_effect_allele.outcome, 
      other_allele.outcome = new_other_allele.outcome
    ) %>%
    dplyr::select(-proxy_snp, -chr, -pos, -alleles, -maf, -distance, -rsq, -dprime,  
                  -new_effect_allele.outcome, -new_other_allele.outcome) %>%
    relocate(target_a1.outcome, proxy_a1.outcome, target_a2.outcome, proxy_a2.outcome, .after = proxy_snp.outcome) %>%
    rename(SNP = snp) %>%
    relocate(SNP, .after = samplesize.outcome)
  
  # Merge outcome and proxy outcomes
  outcome_dat <- bind_rows(
    outcome_clump, proxy_outcome
  ) %>% 
    arrange(chr.outcome, pos.outcome)
  
  outcome_dat
}

#####################################################################
###CHUNK 3: LOAD EXPOSURE DATA
exposure_ss<-readRDS("C:/Users/jessy/OneDrive - University College London/Desktop/ELSA/Social isolation/MR/ukb-b-5379.rds")
#8476: Loneliness, Social isolation
#5445: Number in household
#5379: Frequency of friend/family visits
#4982: Able to confide
#5076: Leisure/social activities: None of the above --> Not use
#4077: Leisure/social activities: Other group activity --> Not use
#4171: Leisure/social activities: Pub or social club
#4667: Leisure/social activities: Religious group
#4000: Leisure/social activities: Sports club or gym
#1553: Leisure/social activities: Adult education class

exposure_ss$TRAIT<-"Frequency of friend/family visits"
exposure_ss$N<-461369

head(exposure_ss)

exposure <- exposure_ss %>%
  format_data(.,
              type = "exposure",
              snps = NULL,
              header = TRUE,
              phenotype_col = "TRAIT",
              snp_col = "ID",
              beta_col = "ES",
              se_col = "SE",
              eaf_col = "AF",
              effect_allele_col = "REF",
              other_allele_col = "ALT",
              pval_col = "LP",
              samplesize_col = "N",
              z_col = "",
              chr_col = "CHROM",
              pos_col = "POS",
              log_pval = T
  ) %>%
  as_tibble()

rm(exposure_ss)

head(exposure)
exposure$pval.exposure=exposure$pval
exposure<-subset(exposure,select=-c(ID.1, pval))

options(encoding = "UTF-8")
options(ieugwasr_api = 'gwas-api.mrcieu.ac.uk/')

exposure_filtered <- exposure %>%
  filter(pval.exposure < 5e-8)

exposure_clump <- clump_data(exposure_filtered,
                             clump_kb = 10000,
                             clump_r2 = 0.001,
                             clump_p1 = 5e-8,
                             clump_p2 = 1,
                             pop = "EUR")

exposure_dat <- exposure_clump

rm(exposure_clump)

#####################################################################
###CHUNK 4: LOAD OUTCOME DATA
# List of genes
genes <- c("NEFL")
#"ACVRL1", "HAVCR1", , "MMP12", "NEFL", "PRSS8", "REN", "TNFRSF10A", "TNFRSF10B", "TNFRSF11A", "VSIG2", "HAOX1"
# Initialize a list to store the results
outcome_list <- list()

# Loop through each gene
for (gene in genes) {
  # Load outcome data
  file_path <- paste0("C:/Users/jessy/OneDrive - University College London/Desktop/ELSA/Social isolation/MR/", gene, "_rsID.rds")
  outcome_ss <- readRDS(file_path)
  
  # Assign the TRAIT column
  outcome_ss$TRAIT <- gene
  outcome_ss$BETA <- as.numeric(outcome_ss$BETA)
  outcome_ss$SE <- as.numeric(outcome_ss$SE)
  outcome_ss$A1FREQ <- as.numeric(outcome_ss$A1FREQ)
  outcome_ss$N <- as.numeric(outcome_ss$N)
  outcome_ss$LOG10P <- as.numeric(outcome_ss$LOG10P)
  
  # Format outcome data
  outcome <- outcome_ss %>%
    format_data(.,
                type = "outcome",
                snps = NULL,
                header = TRUE,
                phenotype_col = "TRAIT",
                snp_col = "RSID",
                beta_col = "BETA",
                se_col = "SE",
                eaf_col = "A1FREQ",
                effect_allele_col = "ALLELE1",
                other_allele_col = "ALLELE0",
                pval_col = "LOG10P",
                samplesize_col = "N",
                z_col = "CHISQ",
                chr_col = "CHROM",
                pos_col = "GENPOS",
                log_pval = TRUE
    ) %>%
    as_tibble()
  
  # Store the formatted data in the list
  outcome_list[[gene]] <- outcome
}

outcome <- outcome_list[["NEFL"]]

###CHUNK 5: LD Proxy SNPs
#Extract exposure SNPs present in outcome
outcome_clump <- semi_join(
  outcome, exposure_dat, by = "SNP"
)

# Exposure SNPs not present in outomce
exp_snps_wo <- anti_join(
  exposure_dat, outcome, by = "SNP"
)

# Use LDLinkR to identify proxy snps
LDproxy_batch(exp_snps_wo$SNP, 
              pop = "EUR",             # Match population ancestries
              r2d = "r2", 
              token = 'a6deee62cc4a', 
              append = TRUE,           # We appended the results of each LDlink query to a single file
              genome_build = "grch38") # Select genome build based on summary stats

system("mv combined_query_snp_list_grch38.txt data/exposure_outcome_proxy_snps.txt")

# Munge proxy snp file
outcome_dat <- munge_proxies("C:/Users/jessy/OneDrive - University College London/Documents/exposure_outcome_proxy_snps.txt", outcome, outcome_clump)

outcome_dat = outcome_clump

#####################################################################
###CHUNK 5: HARMONIZE EXPOSURE AND OUTCOME DATA
exposure_dat$exposure="Leisure/social activities: Pub or social club"
exposure_dat$id.exposure="Leisure/social activities: Pub or social club"

mr_dat <- harmonise_data(exposure_dat, outcome_dat, action = 2) 

head(mr_dat)

#####################################################################
###CHUNK 6: RUN MR ANALYSES
mr_het1 <- mr_heterogeneity(mr_dat)

# primary methods
res1 <- mr(mr_dat, method_list = c(
  "mr_ivw", "mr_egger_regression", "mr_weighted_median", "mr_two_sample_ml", "mr_weighted_mode"
), parameters = default_parameters())

# Egger intercept
mr_egger_int1 <- mr_pleiotropy_test(mr_dat)

# single SNP analyses
res1_single <- mr_singlesnp(mr_dat, all_method=c("mr_ivw", "mr_egger_regression", "mr_weighted_median", "mr_weighted_mode", "mr_two_sample_ml"))

# leave one out analyses
res1_loo <- mr_leaveoneout(mr_dat)

# Main results
res1
mr_het1
mr_egger_int1
res1_single
res1_loo

# Scatter plot
scatter_p <- mr_scatter_plot(res1, mr_dat)

FGFR2_4171_F <- scatter_p[[1]] + 
  theme_bw() + 
  guides(color = guide_legend(ncol = 1)) + 
  labs(title = "Leisure/social activities: Pub or social club (ukb-b-4171) and FGFR2") +
  theme(
    text = element_text(size = 12)
  )

FGFR2_4171_F

ggsave("C:/Users/jessy/OneDrive - University College London/Desktop/ELSA/Social isolation/MR/RESULTS/PLOT/FGFR2_4171_F.png", FGFR2_4171_F, width = 8, height = 6, units = "in")
